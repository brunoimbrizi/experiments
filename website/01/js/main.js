// Generated by CoffeeScript 1.6.3
(function() {
  var init;

  init = function() {
    var sketch;
    return sketch = Sketch.create({
      particles: [],
      colour: null,
      composite: null,
      mode: 0,
      body: null,
      timeline_0: null,
      timeline_1: null,
      timeline_2: null,
      NUM_MODES: 3,
      NUM_PARTICLES: 30,
      DISTANCE: 50,
      DISTANCE_SQ: null,
      GRAVITY: 0,
      WIND: 0,
      DAMP: 0.9,
      COLOURS_0: ['rgba(34, 34, 34, 0.1)', 'rgba(34, 34, 34, 0.5)'],
      COLOURS_1: ['rgba(243, 134, 48, 0.5)', 'rgba(250, 105, 0, 0.1)', 'rgba(250, 105, 0, 0.8)', 'rgba(192, 37, 37, 0.5)'],
      COLOURS_2: ['rgba(105, 195, 231, 0.5)', 'rgba(64, 147, 255, 0.1)', 'rgba(64, 147, 255, 0.7)', 'rgba(27, 60, 100, 0.5)'],
      THICKNESS: 20,
      SOURCE_OVER: 'source-over',
      LIGHTER: 'lighter',
      container: document.getElementById('container'),
      autoclear: false,
      setup: function() {
        window.focus();
        this.DISTANCE_SQ = this.DISTANCE * this.DISTANCE;
        this.colour = {};
        this.colour.c = this.COLOURS_0[0];
        this.composite = this.SOURCE_OVER;
        this.body = document.getElementsByTagName('body')[0];
        this.initParticles();
        this.initColours();
        return this.switchMode();
      },
      update: function() {
        var a, dd, dx, dy, i, np, ox, oy, p, pp, _i, _ref, _results;
        p = this.particles[0];
        p.x = sketch.mouse.x;
        p.y = sketch.mouse.y;
        _results = [];
        for (i = _i = _ref = this.NUM_PARTICLES - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          p = this.particles[i];
          np = this.particles[i + 1];
          pp = this.particles[i - 1];
          if (i === 0) {
            pp = p;
          } else if (i === this.NUM_PARTICLES - 1) {
            np = p;
          }
          dx = pp.x - np.x;
          dy = pp.y - np.y;
          p.angle = atan2(dy, dx) + HALF_PI;
          p.mx = -p.thickness * cos(p.angle);
          p.my = -p.thickness * sin(p.angle);
          p.nx = p.thickness * cos(p.angle);
          p.ny = p.thickness * sin(p.angle);
          p.vx *= this.DAMP;
          p.vy *= this.DAMP;
          p.x += p.vx;
          p.y += p.vy;
          ox = p.x;
          oy = p.y;
          dx = p.x - pp.x;
          dy = p.y - pp.y;
          dd = dx * dx + dy * dy;
          if (dd > this.DISTANCE_SQ) {
            a = atan2(dy, dx);
            p.x = pp.x + this.DISTANCE * cos(a);
            p.y = pp.y + this.DISTANCE * sin(a);
            p.vx += (p.x - ox) * .1;
            _results.push(p.vy += (p.y - oy) * .1);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      },
      draw: function() {
        var i, mx, my, np, p, pp, _i, _j, _len, _ref, _ref1;
        sketch.globalCompositeOperation = this.composite;
        sketch.beginPath();
        sketch.strokeStyle = this.colour.c;
        sketch.fillStyle = sketch.strokeStyle;
        sketch.lineWidth = 1;
        _ref = this.particles;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          sketch.arc(p.x, p.y, 2, 0, TWO_PI);
          sketch.closePath();
        }
        sketch.fill();
        sketch.beginPath();
        for (i = _j = 0, _ref1 = this.NUM_PARTICLES; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          p = this.particles[i];
          np = this.particles[i + 1];
          pp = this.particles[i - 1];
          if (i === 0) {
            pp = p;
          } else if (i === this.NUM_PARTICLES - 1) {
            np = p;
          }
          mx = p.x + (np.x - p.x) * .5;
          my = p.y + (np.y - p.y) * .5;
          if (this.mode === 1) {
            sketch.bezierCurveTo(pp.x + cos(pp.angle + HALF_PI) * 10, pp.y + sin(pp.angle + HALF_PI) * 10, p.x - cos(p.angle + HALF_PI) * 10, p.y - sin(p.angle + HALF_PI) * 10, p.x, p.y);
          } else if (this.mode === 2) {
            sketch.bezierCurveTo(pp.x + cos(pp.angle + HALF_PI) * 10, pp.y + sin(pp.angle + HALF_PI) * 10, p.x - cos(np.angle + HALF_PI) * 10, p.y - sin(np.angle + HALF_PI) * 10, np.x, np.y);
          } else {
            sketch.bezierCurveTo(p.x + p.mx, p.y + p.my, p.x + p.nx, p.y + p.ny, mx, my);
            sketch.arc(p.x + p.nx, p.y + p.ny, 2, 0, TWO_PI);
          }
        }
        return sketch.stroke();
      },
      keydown: function() {
        if (sketch.keys.C) {
          return sketch.clear();
        } else if (sketch.keys.SPACE) {
          return this.switchMode();
        }
      },
      click: function() {},
      touchend: function() {
        var touch;
        touch = sketch.touches[0];
        if (touch.ox === touch.x && touch.oy === touch.y) {
          return this.switchMode();
        }
      },
      switchMode: function() {
        var composite;
        sketch.clear();
        if (this.mode < this.NUM_MODES - 1) {
          this.mode++;
        } else {
          this.mode = 0;
        }
        switch (this.mode) {
          case 1:
            this.timeline_0.stop();
            this.timeline_1.play();
            this.timeline_2.stop();
            this.body.style.background = '#222';
            try {
              parent.document(parent.app.updateBodyClass(''));
            } catch (_error) {}
            return this.composite = this.LIGHTER;
          case 2:
            this.timeline_0.stop();
            this.timeline_1.stop();
            this.colour.c = this.COLOURS_2[0];
            this.timeline_2.play();
            this.body.style.background = '#222';
            try {
              parent.document(parent.app.updateBodyClass(''));
            } catch (_error) {}
            return composite = this.LIGHTER;
          default:
            this.timeline_0.play();
            this.timeline_1.stop();
            this.timeline_2.stop();
            this.colour.c = this.COLOURS_0[0];
            this.body.style.background = '#FFF';
            try {
              parent.document(parent.app.updateBodyClass('white'));
            } catch (_error) {}
            return this.composite = this.SOURCE_OVER;
        }
      },
      initParticles: function() {
        var i, p, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.NUM_PARTICLES; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          p = {
            x: sketch.mouse.x,
            y: sketch.mouse.y,
            vx: 0,
            vy: 0,
            angle: 0,
            thickness: 0,
            mx: 0,
            my: 0,
            nx: 0,
            ny: 0
          };
          if (i < this.NUM_PARTICLES * .5) {
            p.thickness = this.THICKNESS * (i / this.NUM_PARTICLES);
          } else {
            p.thickness = this.THICKNESS * ((this.NUM_PARTICLES - i) / this.NUM_PARTICLES);
          }
          _results.push(this.particles.push(p));
        }
        return _results;
      },
      initColours: function() {
        var i, _i, _j, _k, _ref, _ref1, _ref2;
        this.timeline_0 = new TimelineMax({
          repeat: -1,
          paused: true
        });
        for (i = _i = 0, _ref = this.COLOURS_0.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          this.timeline_0.to(this.colour, 3, {
            colorProps: {
              c: this.COLOURS_0[i]
            }
          });
        }
        this.timeline_0.to(this.colour, 3, {
          colorProps: {
            c: this.COLOURS_0[0]
          }
        });
        this.timeline_1 = new TimelineMax({
          repeat: -1,
          paused: true
        });
        for (i = _j = 0, _ref1 = this.COLOURS_1.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          this.timeline_1.to(this.colour, 3, {
            colorProps: {
              c: this.COLOURS_1[i]
            }
          });
        }
        this.timeline_1.to(this.colour, 3, {
          colorProps: {
            c: this.COLOURS_1[0]
          }
        });
        this.timeline_2 = new TimelineMax({
          repeat: -1,
          paused: true
        });
        for (i = _k = 0, _ref2 = this.COLOURS_2.length; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
          this.timeline_2.to(this.colour, 3, {
            colorProps: {
              c: this.COLOURS_2[i]
            }
          });
        }
        return this.timeline_2.to(this.colour, 3, {
          colorProps: {
            c: this.COLOURS_2[0]
          }
        });
      }
    });
  };

  init();

}).call(this);
